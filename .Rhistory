method = "knn"
)
# apply the model and get the results
testSet$predColour_knn <- predict(object = mod_knn_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_knn),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# creating the glm model
mod_rf_partition <- train(
flag_colour ~.,
data = trainSet,
method = "rf"
)
# apply the model and get the results
testSet$predColour_rf <- predict(object = mod_rf_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_rf),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# We are going to choose the left half of the flag to predict the other half
train_id <- createDataPartition(y = japan_flag$flag_colour,
p = 0.005,
list = F)
trainSet <- japan_flag[train_id,]
testSet <- japan_flag[-train_id,]
# TrainSet plot. We see that it contains the left part of the flag
ggplot(trainSet) +
geom_point(aes(x = x, y = y, color = flag_colour), size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# creating the glm model
mod_gbm_partition <- train(
flag_colour ~.,
data = trainSet,
method = "glm"
)
# apply the model and get the results
testSet$predColour_glm <- predict(object = mod_gbm_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_glm),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = c("white","red"))
# creating the glm model
mod_knn_partition <- train(
flag_colour ~.,
data = trainSet,
method = "knn"
)
# apply the model and get the results
testSet$predColour_knn <- predict(object = mod_knn_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_knn),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# creating the glm model
mod_rf_partition <- train(
flag_colour ~.,
data = trainSet,
method = "rf"
)
# apply the model and get the results
testSet$predColour_rf <- predict(object = mod_rf_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_rf),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# We are going to choose the left half of the flag to predict the other half
train_id <- createDataPartition(y = japan_flag$flag_colour,
p = 0.0075,
list = F)
trainSet <- japan_flag[train_id,]
testSet <- japan_flag[-train_id,]
# We are going to choose the left half of the flag to predict the other half
train_id <- createDataPartition(y = japan_flag$flag_colour,
p = 0.0009,
list = F)
trainSet <- japan_flag[train_id,]
testSet <- japan_flag[-train_id,]
# We are going to choose the left half of the flag to predict the other half
train_id <- createDataPartition(y = japan_flag$flag_colour,
p = 0.009,
list = F)
trainSet <- japan_flag[train_id,]
testSet <- japan_flag[-train_id,]
# TrainSet plot. We see that it contains the left part of the flag
ggplot(trainSet) +
geom_point(aes(x = x, y = y, color = flag_colour), size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# creating the glm model
mod_gbm_partition <- train(
flag_colour ~.,
data = trainSet,
method = "glm"
)
# apply the model and get the results
testSet$predColour_glm <- predict(object = mod_gbm_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_glm),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = c("white","red"))
# creating the glm model
mod_knn_partition <- train(
flag_colour ~.,
data = trainSet,
method = "knn"
)
# apply the model and get the results
testSet$predColour_knn <- predict(object = mod_knn_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_knn),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# creating the glm model
mod_rf_partition <- train(
flag_colour ~.,
data = trainSet,
method = "rf"
)
# apply the model and get the results
testSet$predColour_rf <- predict(object = mod_rf_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_rf),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# We are going to choose the left half of the flag to predict the other half
train_id <- createDataPartition(y = japan_flag$flag_colour,
p = 0.01,
list = F)
trainSet <- japan_flag[train_id,]
testSet <- japan_flag[-train_id,]
# TrainSet plot. We see that it contains the left part of the flag
ggplot(trainSet) +
geom_point(aes(x = x, y = y, color = flag_colour), size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# creating the glm model
mod_gbm_partition <- train(
flag_colour ~.,
data = trainSet,
method = "glm"
)
# apply the model and get the results
testSet$predColour_glm <- predict(object = mod_gbm_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_glm),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = c("white","red"))
# creating the glm model
mod_knn_partition <- train(
flag_colour ~.,
data = trainSet,
method = "knn"
)
# apply the model and get the results
testSet$predColour_knn <- predict(object = mod_knn_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_knn),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# creating the glm model
mod_rf_partition <- train(
flag_colour ~.,
data = trainSet,
method = "rf"
)
# apply the model and get the results
testSet$predColour_rf <- predict(object = mod_rf_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_rf),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# We are going to choose the left half of the flag to predict the other half
train_id <- createDataPartition(y = japan_flag$flag_colour,
p = 0.025,
list = F)
trainSet <- japan_flag[train_id,]
# We are going to choose the left half of the flag to predict the other half
train_id <- createDataPartition(y = japan_flag$flag_colour,
p = 0.025,
list = F)
trainSet <- japan_flag[train_id,]
testSet <- japan_flag[-train_id,]
# TrainSet plot. We see that it contains the left part of the flag
ggplot(trainSet) +
geom_point(aes(x = x, y = y, color = flag_colour), size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# creating the glm model
mod_gbm_partition <- train(
flag_colour ~.,
data = trainSet,
method = "glm"
)
# apply the model and get the results
testSet$predColour_glm <- predict(object = mod_gbm_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_glm),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = c("white","red"))
# creating the glm model
mod_knn_partition <- train(
flag_colour ~.,
data = trainSet,
method = "knn"
)
# apply the model and get the results
testSet$predColour_knn <- predict(object = mod_knn_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_knn),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# creating the glm model
mod_rf_partition <- train(
flag_colour ~.,
data = trainSet,
method = "rf"
)
# apply the model and get the results
testSet$predColour_rf <- predict(object = mod_rf_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_rf),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# creating the glm model
mod_rf_partition <- train(
flag_colour ~.,
data = trainSet,
method = "rpart"
)
# apply the model and get the results
testSet$predColour_rf <- predict(object = mod_rf_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_rf),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
source('~/UbiqumCodeAcademy/projects/fun_with_flags/scripts/japan_flag_granularityReduction.R', echo=TRUE)
source('~/UbiqumCodeAcademy/projects/fun_with_flags/scripts/japan_flag_granularityReduction.R', echo=TRUE)
source('~/UbiqumCodeAcademy/projects/fun_with_flags/scripts/japan_flag_granularityReduction.R', echo=TRUE)
rf
# creating the svm model
mod_svm_partition <- train(
flag_colour ~.,
data = trainSet,
method = "svm"
)
# creating the svm model
mod_svm_partition <- train(
flag_colour ~.,
data = trainSet,
method = "svmRadial"
)
# apply the model and get the results
testSet$predColour_svm <- predict(object = mod_svm_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_svm),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
saveRDS(mod_svm_partition, file = "models/model_svm_smllFlag.rds")
mod_svm_partition <- readRDS(file = "models/model_svm_smllFlag.rds")
# creating the glm model
mod_dt_partition <- train(
flag_colour ~.,
data = trainSet,
method = "rpart"
)
saveRDS(mod_dt_partition, file = "models/model_dt_smllFlag.rds")
mod_dt_partition <- readRDS(file = "models/model_dt_smllFlag.rds")
# apply the model and get the results
testSet$predColour_dt <- predict(object = mod_dt_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_dt),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
ggplot(data = japan_flag) +
geom_point(aes(x = x, y = y, color = flag_colour), size = 0.05) +
coord_fixed(ratio = 1) +
scale_color_manual(values = japanPalette)
# We are going to choose the left half of the flag to predict the other half
train_id <- createDataPartition(y = japan_flag$flag_colour,
p = 0.2,
list = F)
trainSet <- japan_flag[train_id,]
testSet <- japan_flag[-train_id,]
# TrainSet plot. We see that it contains the left part of the flag
ggplot(trainSet) +
geom_point(aes(x = x, y = y, color = flag_colour), size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# creating the glm model
mod_gbm_partition <- train(
flag_colour ~.,
data = trainSet,
method = "glm"
)
# apply the model and get the results
testSet$predColour_glm <- predict(object = mod_gbm_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_glm),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = c("white","red"))
# creating the glm model
mod_knn_partition <- train(
flag_colour ~.,
data = trainSet,
method = "knn"
)
# apply the model and get the results
testSet$predColour_knn <- predict(object = mod_knn_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_knn),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# creating the glm model
mod_dt_partition <- train(
flag_colour ~.,
data = trainSet,
method = "rpart"
)
saveRDS(mod_dt_partition, file = "models/model_dt_smllFlag.rds")
mod_dt_partition <- readRDS(file = "models/model_dt_smllFlag.rds")
# apply the model and get the results
testSet$predColour_dt <- predict(object = mod_dt_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_dt),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# creating the svm model
mod_svm_partition <- train(
flag_colour ~.,
data = trainSet,
method = "svmRadial"
)
saveRDS(mod_svm_partition, file = "models/model_svm_smllFlag.rds")
mod_svm_partition <- readRDS(file = "models/model_svm_smllFlag.rds")
# apply the model and get the results
testSet$predColour_svm <- predict(object = mod_svm_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_svm),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# libraries ---------------------------------------------------------------
if (require(pacman) == FALSE) {
install.packages("pacman")
}
pacman::p_load(ggplot2, dplyr, caret)
# data creation -----------------------------------------------------------
# Let's create 50k points on a 3x2 grid
x <- runif(50000, min = 0, max = 3)
y <- runif(50000, min = 0, max = 2)
# Flag colour palette
japanPalette <- c("red", "white")
# Flag dataframe
japan_flag <- as.data.frame(x = x)
japan_flag$y <- y
# Now we add the colour
japan_flag <- mutate(
japan_flag,
flag_colour = ifelse(
(x - 1.5)^2 + (y-1)^2 > 3/10, "white", "red")
)
# data visualization ------------------------------------------------------
ggplot(data = japan_flag) +
geom_point(aes(x = x, y = y, color = flag_colour), size = 0.05) +
coord_fixed(ratio = 1) +
scale_color_manual(values = japanPalette)
# train and test ----------------------------------------------------------
# We are going to choose the left half of the flag to predict the other half
train_id <- createDataPartition(y = japan_flag$flag_colour,
p = 0.2,
list = F)
trainSet <- japan_flag[train_id,]
testSet <- japan_flag[-train_id,]
# TrainSet plot. We see that it contains the left part of the flag
ggplot(trainSet) +
geom_point(aes(x = x, y = y, color = flag_colour), size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# logistic regression model -----------------------------------------------
# creating the glm model
mod_gbm_partition <- train(
flag_colour ~.,
data = trainSet,
method = "glm"
)
# apply the model and get the results
testSet$predColour_glm <- predict(object = mod_gbm_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_glm),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = c("white","red"))
# knn model ---------------------------------------------------------------
# creating the glm model
mod_knn_partition <- train(
flag_colour ~.,
data = trainSet,
method = "knn"
)
# apply the model and get the results
testSet$predColour_knn <- predict(object = mod_knn_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_knn),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# creating the glm model
# mod_dt_partition <- train(
#   flag_colour ~.,
#   data = trainSet,
#   method = "rpart"
# )
mod_dt_partition <- readRDS(file = "models/model_dt_smllFlag.rds")
# apply the model and get the results
testSet$predColour_dt <- predict(object = mod_dt_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_dt),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
# creating the svm model
# mod_svm_partition <- train(
#   flag_colour ~.,
#   data = trainSet,
#   method = "svmRadial"
# )
mod_svm_partition <- readRDS(file = "models/model_svm_smllFlag.rds")
# apply the model and get the results
testSet$predColour_svm <- predict(object = mod_svm_partition, newdata = testSet)
# visualize the errors
ggplot() +
geom_point(data = testSet, aes(x = x, y = y, colour = predColour_svm),
size  = 0.1) +
coord_fixed(ratio = 1) +
xlim(0,3) +
scale_colour_manual(values = japanPalette)
